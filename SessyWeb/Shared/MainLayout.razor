@inherits LayoutComponentBase
@inject CookieThemeService CookieThemeService
@inject ThemeService ThemeService
@inject RadzenTheme RadzenTheme
@inject IJSRuntime JSRuntime

<RadzenTooltip />
<RadzenChartTooltip />
<RadzenTheme Theme="@NewTheme" />

<RadzenLayout>
	<RadzenHeader>
		<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
			<RadzenSidebarToggle Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
			<RadzenImage Path="..\SessyWeb\images\sessy.svg" />
		</RadzenStack>
	</RadzenHeader>
	<RadzenSidebar @bind-Expanded="@sidebar1Expanded">
		<RadzenPanelMenu>
			<RadzenPanelMenuItem 
				Text="Home"
				Path="" Icon="home" />
			<RadzenPanelMenuItem 
				Text="Charging hours"
				Path="charginghours"
				Icon="account_box" />
			<RadzenDropDown
				Style="width: 100%;"
				Name="ThemeDropDown"
				TValue="string"
				Value="@ThemeService.Theme"
				ValueChanged="@ChangeTheme"
				Data="@Themes.Free"
				TextProperty=@nameof(Theme.Text)
				ValueProperty=@nameof(Theme.Value) />

		</RadzenPanelMenu>
	</RadzenSidebar>
	<RadzenBody>
		<div class="rz-p-4">
			@Body
		</div>
	</RadzenBody>
	<RadzenFooter>

	</RadzenFooter>
</RadzenLayout>

@code {
	public static string NewTheme { get; set; } = "Dark";

	bool sidebar1Expanded = true;

	void ChangeTheme(string theme)
	{
		NewTheme = theme;
		ThemeService.SetTheme(theme, true);
	}
}

@inject IJSRuntime JSRuntime
@inject Radzen.ThemeService ThemeService

@code {
	private bool _initialized;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && !_initialized)
		{
			_initialized = true; // Prevents multiple calls

			// Haal het thema op uit localStorage
			var theme = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "SessyTheme");

			if (!string.IsNullOrEmpty(theme))
			{
				NewTheme = theme;

				// Pas het thema toe
				ThemeService.SetTheme(theme, true);
			}
		}
	}
}
